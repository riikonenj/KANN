library("devtools")
document()
document()
document()
rlang::last_trace()
rlang::last_trace(drop = FALSE)
getwd()
setwd("C:\Users\juha\FIMM\knnreg manuskripti\KANN")
setwd("C:/Users/juha/FIMM/knnreg manuskripti/KANN")
document()
document()
document()
document()
document()
document()
document()
document()
usethis::use_data(refexample, queryexample, pcaexample, eigenvalexample, overwrite = TRUE)
setwd("/C:/Users/juha/FIMM/knnreg manuskripti/KANN R package/KANN")
getwd()
setwd("C:/Users/juha/FIMM/knnreg manuskripti/KANN R package/KANN")
usethis::use_data(refexample, queryexample, pcaexample, eigenvalexample, overwrite = TRUE)
setwd("C:/Users/juha/FIMM/knnreg manuskripti/KANN R package/KANN")
getwd()
getwd()
devtools::load_all()
library(KANN)
head(refexample)
usethis::use_data()
getwd()
devtools::document()
devtools::build()
load("./data/eigvalexample.RData")
eigvalexample
eigvalexample <- load("./data/eigvalexample.RData")
eigvalexample
# Create and save dummy data (locally) for KANN
library(MASS) # For multivariate normal data
library(data.table) # For data manipulation
library(Matrix) # For eigen decomposition
# Parameters
n_ref <- 100    # Number of reference individuals
n_query <- 50   # Number of query individuals
n_pcs <- 2      # Number of principal components
n_pop <- 3      # Number of source populations
# Set seed for reproducibility
set.seed(123)
# 1. Generate reference sample ancestry fractions
generate_dominant_ancestry <- function(n, n_pop) {
ancestry <- matrix(0, nrow = n, ncol = n_pop)
for (i in seq_len(n)) {
dominant_pop <- sample(n_pop, 1) # Assign a dominant population
ancestry[i, dominant_pop] <- runif(1, 0.75, 1) # Ensure at least 75% for dominant
other_pops <- setdiff(seq_len(n_pop), dominant_pop)
ancestry[i, other_pops] <- runif(length(other_pops)) * (1 - ancestry[i, dominant_pop])
ancestry[i, ] <- ancestry[i, ] / sum(ancestry[i, ]) # Normalize to sum to 1
}
ancestry
}
ref_ancestry <- as.data.table(generate_dominant_ancestry(n_ref, n_pop))
setnames(ref_ancestry, paste0("POP", 1:n_pop))
ref_ancestry[, ID := paste0("Ref", seq_len(n_ref))]
# Reorder columns to place ID first
setcolorder(ref_ancestry, "ID")
# 2. Simulate PCA coordinates for reference samples
# Define population-specific PCA means and covariance matrices
pop_means <- list(c(-10, 0), c(10, 0), c(0, 10)) # Distinct clusters in PC space
pop_covs <- replicate(n_pop, diag(n_pcs) * 0.5, simplify = FALSE) # Small covariance for tighter clustering
# Generate PCA coordinates reflecting ancestry fractions
pca_coords_ref <- matrix(0, nrow = n_ref, ncol = n_pcs)
for (i in seq_len(n_ref)) {
ancestry <- unlist(ref_ancestry[i, .(POP1, POP2, POP3)])
pca_coords_ref[i, ] <- Reduce(`+`, lapply(seq_len(n_pop), function(pop) {
ancestry[pop] * mvrnorm(1, mu = pop_means[[pop]], Sigma = pop_covs[[pop]])
})) + rnorm(n_pcs, 0, 0.1) # Add small noise
}
# 3. Generate ancestry fractions for query samples
generate_query_ancestry <- function(n, n_pop) {
alpha <- rep(1, n_pop) # Equal concentration parameters for Dirichlet
t(apply(matrix(runif(n * n_pop), ncol = n_pop), 1, function(x) x / sum(x)))
}
query_ancestry <- as.data.table(generate_query_ancestry(n_query, n_pop))
setnames(query_ancestry, paste0("POP", 1:n_pop))
query_ancestry[, ID := paste0("Query", seq_len(n_query))]
# Reorder columns to place ID first
setcolorder(query_ancestry, "ID")
# Simulate PCA coordinates for query samples
query_pca_coords <- matrix(0, nrow = n_query, ncol = n_pcs)
for (i in seq_len(n_query)) {
ancestry <- unlist(query_ancestry[i, .(POP1, POP2, POP3)])
query_pca_coords[i, ] <- Reduce(`+`, lapply(seq_len(n_pop), function(pop) {
ancestry[pop] * mvrnorm(1, mu = pop_means[[pop]], Sigma = diag(n_pcs) * 1.0) # Wider spread for query samples
})) + rnorm(n_pcs, 0, 0.3) # Add small noise
}
# Combine reference and query samples
pca_coords <- rbind(pca_coords_ref, query_pca_coords)
ids <- c(paste0("Ref", seq_len(n_ref)), paste0("Query", seq_len(n_query)))
pca_data <- as.data.table(pca_coords)
setnames(pca_data, paste0("PC", seq_len(n_pcs)))
pca_data[, ID := ids]
# Standardize each PC to have zero mean and unit variance
for (pc in paste0("PC", seq_len(n_pcs))) {
pca_data[[pc]] <- scale(pca_data[[pc]])
}
# Reorder columns to place ID first
setcolorder(pca_data, "ID")
# 4. Compute eigenvalues for the 2 PCs
# Treat the PCA data as the original data to compute covariance matrix
cov_matrix <- cov(as.matrix(pca_data[, -1, with = FALSE]))
eigen_decomp <- eigen(cov_matrix)
eigenvalues <- eigen_decomp$values
eigenvalues <- eigenvalues / sum(eigenvalues) # Normalize eigenvalues to sum to 1
# Results
print("Reference Ancestry Fractions:")
print(ref_ancestry)
print("Query Ancestry Fractions:")
print(query_ancestry)
print("PCA Data (.eigenvec format):")
print(pca_data)
print("Eigenvalues:")
print(eigenvalues)
# Rename
refexample = ref_ancestry
queryexample = query_ancestry
pcaexample = pca_data
eigvalexample = eigenvalues
ok?
usethis::use_data(refexample, queryexample, pcaexample, eigvalexample, overwrite = TRUE)
Sys.getenv("juha")
Sys.getenv("jriikone")
Sys.getenv("juriikon")
Sys.getenv("USERNAME
")
Sys.getenv("USERNAME")
?usethis
?usethis::use_data
??usethis
getWd()
getwd()
pcaexample
save(refexample, file = "C:/Users/juha/FIMM/knnreg manuskripti/KANN R package/KANN/data/refexample.rda")
# As .Rdata
save(refexample, file = "C:/Users/juha/FIMM/knnreg manuskripti/KANN R package/KANN/data/refexample.rda")
save(queryexample, file = "C:/Users/juha/FIMM/knnreg manuskripti/KANN R package/KANN/data/queryexample.rda")
save(pcaexample, file = "C:/Users/juha/FIMM/knnreg manuskripti/KANN R package/KANN/data/pcaexample.rda")
save(eigvalexample, file = "C:/Users/juha/FIMM/knnreg manuskripti/KANN R package/KANN/data/eigvalexample.rda")
devtools::document()
setwd("C:/Users/juha/FIMM/knnreg manuskripti/KANN R package/KANN")
devtools::document()
library(MASS) # For multivariate normal data
library(data.table) # For data manipulation
library(Matrix) # For eigen decomposition
# Parameters
n_ref <- 100    # Number of reference individuals
n_query <- 50   # Number of query individuals
n_pcs <- 2      # Number of principal components
n_pop <- 3      # Number of source populations
# Set seed for reproducibility
set.seed(123)
# 1. Generate reference sample ancestry fractions
generate_dominant_ancestry <- function(n, n_pop) {
ancestry <- matrix(0, nrow = n, ncol = n_pop)
for (i in seq_len(n)) {
dominant_pop <- sample(n_pop, 1) # Assign a dominant population
ancestry[i, dominant_pop] <- runif(1, 0.75, 1) # Ensure at least 75% for dominant
other_pops <- setdiff(seq_len(n_pop), dominant_pop)
ancestry[i, other_pops] <- runif(length(other_pops)) * (1 - ancestry[i, dominant_pop])
ancestry[i, ] <- ancestry[i, ] / sum(ancestry[i, ]) # Normalize to sum to 1
}
ancestry
}
ref_ancestry <- as.data.table(generate_dominant_ancestry(n_ref, n_pop))
setnames(ref_ancestry, paste0("POP", 1:n_pop))
ref_ancestry[, ID := paste0("Ref", seq_len(n_ref))]
# Reorder columns to place ID first
setcolorder(ref_ancestry, "ID")
# 2. Simulate PCA coordinates for reference samples
# Define population-specific PCA means and covariance matrices
pop_means <- list(c(-10, 0), c(10, 0), c(0, 10)) # Distinct clusters in PC space
pop_covs <- replicate(n_pop, diag(n_pcs) * 0.5, simplify = FALSE) # Small covariance for tighter clustering
# Generate PCA coordinates reflecting ancestry fractions
pca_coords_ref <- matrix(0, nrow = n_ref, ncol = n_pcs)
for (i in seq_len(n_ref)) {
ancestry <- unlist(ref_ancestry[i, .(POP1, POP2, POP3)])
pca_coords_ref[i, ] <- Reduce(`+`, lapply(seq_len(n_pop), function(pop) {
ancestry[pop] * mvrnorm(1, mu = pop_means[[pop]], Sigma = pop_covs[[pop]])
})) + rnorm(n_pcs, 0, 0.1) # Add small noise
}
# 3. Generate ancestry fractions for query samples
generate_query_ancestry <- function(n, n_pop) {
alpha <- rep(1, n_pop) # Equal concentration parameters for Dirichlet
t(apply(matrix(runif(n * n_pop), ncol = n_pop), 1, function(x) x / sum(x)))
}
query_ancestry <- as.data.table(generate_query_ancestry(n_query, n_pop))
setnames(query_ancestry, paste0("POP", 1:n_pop))
query_ancestry[, ID := paste0("Query", seq_len(n_query))]
# Reorder columns to place ID first
setcolorder(query_ancestry, "ID")
# Simulate PCA coordinates for query samples
query_pca_coords <- matrix(0, nrow = n_query, ncol = n_pcs)
for (i in seq_len(n_query)) {
ancestry <- unlist(query_ancestry[i, .(POP1, POP2, POP3)])
query_pca_coords[i, ] <- Reduce(`+`, lapply(seq_len(n_pop), function(pop) {
ancestry[pop] * mvrnorm(1, mu = pop_means[[pop]], Sigma = diag(n_pcs) * 1.0) # Wider spread for query samples
})) + rnorm(n_pcs, 0, 0.3) # Add small noise
}
# Combine reference and query samples
pca_coords <- rbind(pca_coords_ref, query_pca_coords)
ids <- c(paste0("Ref", seq_len(n_ref)), paste0("Query", seq_len(n_query)))
pca_data <- as.data.table(pca_coords)
setnames(pca_data, paste0("PC", seq_len(n_pcs)))
pca_data[, ID := ids]
# Standardize each PC to have zero mean and unit variance
for (pc in paste0("PC", seq_len(n_pcs))) {
pca_data[[pc]] <- scale(pca_data[[pc]])
}
# Reorder columns to place ID first
setcolorder(pca_data, "ID")
# 4. Compute eigenvalues for the 2 PCs
# Treat the PCA data as the original data to compute covariance matrix
cov_matrix <- cov(as.matrix(pca_data[, -1, with = FALSE]))
eigen_decomp <- eigen(cov_matrix)
eigenvalues <- eigen_decomp$values
eigenvalues <- eigenvalues / sum(eigenvalues) # Normalize eigenvalues to sum to 1
# Results
print("Reference Ancestry Fractions:")
print(ref_ancestry)
print("Query Ancestry Fractions:")
print(query_ancestry)
print("PCA Data (.eigenvec format):")
print(pca_data)
print("Eigenvalues:")
print(eigenvalues)
# Rename
refexample = ref_ancestry
queryexample = query_ancestry
pcaexample = pca_data
eigvalexample = eigenvalues
refidexample = as.character(refexample$ID)
queryidexample = as.character(queryexample$ID)
# As .Rdata
save(refexample, file = "C:/Users/juha/FIMM/knnreg manuskripti/KANN R package/KANN/data/refexample.rda")
save(queryexample, file = "C:/Users/juha/FIMM/knnreg manuskripti/KANN R package/KANN/data/queryexample.rda")
save(pcaexample, file = "C:/Users/juha/FIMM/knnreg manuskripti/KANN R package/KANN/data/pcaexample.rda")
save(eigvalexample, file = "C:/Users/juha/FIMM/knnreg manuskripti/KANN R package/KANN/data/eigvalexample.rda")
save(refidexample, file = "C:/Users/juha/FIMM/knnreg manuskripti/KANN R package/KANN/data/refidexample.rda")
save(queryidexample, file = "C:/Users/juha/FIMM/knnreg manuskripti/KANN R package/KANN/data/queryidexample.rda")
devtools::document()
setwd("C:/Users/juha/FIMM/knnreg manuskripti/KANN R package/KANN")
devtools::document()
setwd("C:/Users/juha/FIMM/knnreg manuskripti/KANN R package/KANN")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
